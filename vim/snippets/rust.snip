snippet     procon_input
        use std::io::prelude::*;
        use std::io;
        use std::str::FromStr;
        #[cfg(local)]
        use std::fs::File;
        #[cfg(local)]
        use std::io::BufReader;

        #[cfg(local)]
        fn buf_read() -> io::Result<(Vec<String>)> {
            let f = try!(File::open("input.txt"));
            let input_lines: Vec<_> = BufReader::new(f).lines().collect();
            let lines: Vec<String> = input_lines.into_iter().map(|e| e.unwrap()).collect();
            Ok((lines))
        }

        #[cfg(not(local))]
        fn buf_read() -> io::Result<(Vec<String>)> {
            let stdin = io::stdin();
            let input_lines: Vec<_> = stdin.lock().lines().collect();
            let lines: Vec<String> = input_lines.into_iter().map(|e| e.unwrap()).collect();
            Ok((lines))
        }

        fn main() {
            type Element = ${1:elem_type};
            let input = buf_read().unwrap();
            let mut input_vectors: Vec<Vec<Element>> = vec![];
            for input_line in input {
                let input_str: Vec<String> = input_line.split(' ').map(String::from).collect();
                let mut input_vector: Vec<Element> = vec![];
                for input_elem_str in input_str {
                    let elem: Element = Element::from_str(input_elem_str.as_str()).unwrap();
                    input_vector.push(elem);
                }
                input_vectors.push(input_vector);
            }
            ${2:code}
        }
